#!/usr/bin/env python3

# Std library imports
import sys
import argparse
from itertools import combinations, islice
from collections import defaultdict, Counter, deque
from math import log2, log
from scipy.cluster.hierarchy import dendrogram
import matplotlib.pyplot as plt

def parse_args():
    
    parser = argparse.ArgumentParser(
            description="Compute the word classed for given input",
            epilog="Author: Matous Machacek <machacekmatous@gmail.com>",
            )

    parser.add_argument("input",
            help="An input file with words (one word per line)",
            type=argparse.FileType('r')
            )
    
    parser.add_argument("--target",
            help="Target number of classes (default 15)",
            type=int,
            default=15,
            )
    
    parser.add_argument("--limit",
            help="Number of words used (default 8000)",
            type=int,
            default=8000,
            )
    
    parser.add_argument("--treshold",
            help="Word count treshold for words to be filtered out (default 10)",
            type=int,
            default=10,
            )
    
    parser.add_argument("--factor",
            help="Factor index to be used (default 0 - word forms)",
            type=int,
            default=0,
            )
    
    parser.add_argument("--dendrogram",
            help="Plot dendrogram",
            action='store_true'
            )
    
    parser.add_argument("--print_classes",
            help="Print members of computed classes",
            action='store_true'
            )


    return parser.parse_args()

def main(): 
    args = parse_args()

    # Prepare words
    words = (line.strip().split('/')[args.factor] for line in args.input)

    # Create table
    table = WordClasses(islice(words, args.limit), treshold=args.treshold)

    if args.dendrogram:
        labels = [cls.string for cls in sorted(table.class_set)]
        linkage_matrix = table.compute_linkage_matrix()
        dendrogram(linkage_matrix, labels=labels, orientation="left")
        plt.show()
    else:
        table.compute_classes(args.target)

    # Print the class members
    if args.print_classes:
        for cls in table.class_set:
            print(str(list(sorted(cls)))) 


class WordClasses(object):
    def __init__(self, words, treshold=10):

        # Load the data
        classes = list(MergableClass(word) for word in words) 
        bigrams = list(n_gram_generator(classes, 2))
        self.N = len(bigrams)

        # Construct initial set of (one-word) classes
        self.class_set = { cls for cls, count in Counter(classes).items() if count >= treshold }

        # Count bigrams (c_k term)
        self.bigrams_counter = SparseMatrixCounter(bigrams)

        # Marginal counts (c_kl, c_kr terms)
        self.left_counter = Counter(left for left, right in bigrams)
        self.right_counter = Counter(right for left, right in bigrams)

        # Compute bigrams mutual information (q_k term)
        self.bigrams_logs = SparseMatrixCounter({
            bigram : self.compute_q(bigram_count, self.left_counter[bigram[0]], self.right_counter[bigram[1]])
            for bigram, bigram_count in self.bigrams_counter.items()
            })

        # Compute cross sums (s_k term)
        self.cross_sums = { cls : self.compute_cross_sum(cls) for cls in self.class_set }

        # Initialize the table of losses (L_k term)
        # (and remember the combination with the minimal loss)
        self.MI_losses = SparseMatrixCounter()
        self.reset_minimal_loss()
        for a,b in self.sorted_class_combinations():
            loss = self.compute_MI_loss(a,b)
            self.MI_losses[a,b] = loss 
            self.remember_minimal_loss((a,b), loss)

    def merge(self, a, b):
        "Merge the classes and update data structures"
        
        merged = a | b

        # Update current set of classes
        self.class_set.remove(a)
        self.class_set.remove(b)
        self.class_set.add(merged)

        # Update bigram count table
        a_count_row = self.bigrams_counter.pop_row(a)
        b_count_row = self.bigrams_counter.pop_row(b)
        self.bigrams_counter.insert_row(merged, a_count_row + b_count_row)

        a_count_col = self.bigrams_counter.pop_collumn(a)
        b_count_col = self.bigrams_counter.pop_collumn(b)
        self.bigrams_counter.insert_collumn(merged, a_count_col + b_count_col)

        # Update marginal counts
        left_margin_a = self.left_counter.pop(a,0)
        left_margin_b = self.left_counter.pop(b,0)
        self.left_counter[merged] = left_margin_a + left_margin_b

        right_margin_a = self.right_counter.pop(a,0)
        right_margin_b = self.right_counter.pop(b,0)
        self.right_counter[merged] = right_margin_a + right_margin_b

        # Update bigram logs
        a_logs_row = self.bigrams_logs.pop_row(a) 
        b_logs_row = self.bigrams_logs.pop_row(b) 
        a_logs_col = self.bigrams_logs.pop_collumn(a) 
        b_logs_col = self.bigrams_logs.pop_collumn(b) 

        left_merged_margin = self.left_counter[merged]
        merged_logs_row = Counter({ 
            r : self.compute_q(bigram_count, left_merged_margin, self.right_counter[r])
            for r, bigram_count in self.bigrams_counter.get_row(merged).items()
            })

        right_merged_margin = self.right_counter[merged]
        merged_logs_collumn = Counter({ 
            l : self.compute_q(bigram_count, self.left_counter[l], right_merged_margin)
            for l, bigram_count in self.bigrams_counter.get_collumn(merged).items()
            })

        self.bigrams_logs.insert_row(merged, merged_logs_row)
        self.bigrams_logs.insert_collumn(merged, merged_logs_collumn) # the logs[merged,merged] is rewriten twice

        # Update cross sums 
        old_cross_sums = self.cross_sums
        self.cross_sums = { 
                cls : old_sum - a_logs_row[cls] \
                              - b_logs_row[cls] \
                              - a_logs_col[cls] \
                              - b_logs_col[cls] \
                              + merged_logs_row[cls] \
                              + merged_logs_collumn[cls]
                for cls, old_sum in old_cross_sums.items()
                if cls != a and cls != b
                }
        self.cross_sums[merged] = self.compute_cross_sum(merged)

        # Update table of losses
        # (and remember the combination with the minimal loss)
        self.MI_losses.pop_row(a)
        self.MI_losses.pop_row(b)
        self.MI_losses.pop_collumn(a)
        self.MI_losses.pop_collumn(b)

        self.reset_minimal_loss()
        for (i,j), old_loss in self.MI_losses.items():
            loss = old_loss - old_cross_sums[i] \
                            - old_cross_sums[j] \
                            + self.cross_sums[i] \
                            + self.cross_sums[j] \
                            + self.compute_q(a_count_col[i] + a_count_col[j], self.left_counter[i] + self.left_counter[j], right_margin_a) \
                            + self.compute_q(a_count_row[i] + a_count_row[j], left_margin_a, self.right_counter[i] + self.right_counter[j]) \
                            + self.compute_q(b_count_col[i] + b_count_col[j], self.left_counter[i] + self.left_counter[j], right_margin_b) \
                            + self.compute_q(b_count_row[i] + b_count_row[j], left_margin_b, self.right_counter[i] + self.right_counter[j]) \
                            - self.compute_q(self.bigrams_counter[i,merged] + self.bigrams_counter[j,merged], self.left_counter[i] + self.left_counter[j], self.right_counter[merged]) \
                            - self.compute_q(self.bigrams_counter[merged,i] + self.bigrams_counter[merged,j], self.left_counter[merged], self.right_counter[i] + self.right_counter[j])
            
            self.MI_losses[i,j] = loss 
            self.remember_minimal_loss((i,j), loss)

        for i in self.class_set - {merged}:
            combination = tuple(sorted([i,merged]))
            loss = self.compute_MI_loss(*combination)
            self.MI_losses[combination] = loss 
            self.remember_minimal_loss(combination, loss)

    def compute_classes(self, n_classes=1):
        """The main loop"""
        print("Initial MI:", self.compute_MI(), file=sys.stderr)
        while len(self.class_set) > n_classes and self.minimal_loss_combination is not None:
            a,b = self.minimal_loss_combination
            print("Merging", a, b, "to", a | b, "(%s)" % self.minimal_loss, file=sys.stderr)
            self.merge(a,b)
    
    def compute_linkage_matrix(self):
        """Similar to compute_classes, it merges all to one class and returns linkage matrix"""

        # Initialize the class to index mapping 
        cls_to_index = defaultdict(lambda: len(cls_to_index))
        [cls_to_index[cls] for cls in sorted(self.class_set)]

        linkage_matrix = []
        while self.minimal_loss_combination is not None:
            a,b = self.minimal_loss_combination
            merged = a | b
            loss = self.minimal_loss
            self.merge(a,b)

            # Append the linkage row to the matrix
            linkage_matrix.append((cls_to_index[a], cls_to_index[b], loss, len(list(merged))))

            # Generate index for the new cluster
            cls_to_index[merged]
        
        return linkage_matrix
        
    def reset_minimal_loss(self):
        self.minimal_loss_combination = None
        self.minimal_loss = None

    def remember_minimal_loss(self, combination, loss):
        if self.minimal_loss is None or loss < self.minimal_loss:
            self.minimal_loss = loss
            self.minimal_loss_combination = combination

    def compute_q(self, bigram_count, left_marginal_count, right_marginal_count):
        if bigram_count > 0:
            return bigram_count / self.N * log2(self.N * bigram_count / (left_marginal_count * right_marginal_count))
        else:
            # Not sure with that
            return 0
        
    def compute_cross_sum(self, a):
        "Computes s_k from the slide 127"
        return sum(self.bigrams_logs.get_row(a).values()) \
             + sum(self.bigrams_logs.get_collumn(a).values()) \
             - self.bigrams_logs[a,a]
    
    def compute_sub_term(self, a, b):
        "Computes the sub term from the slide 127"
        return self.cross_sums[a] \
             + self.cross_sums[b] \
             - self.bigrams_logs[a,b] \
             - self.bigrams_logs[b,a]

    def compute_add_term(self, a, b):
        "Computes the add term from the slide 128"
        result = 0
        
        # First sum
        a_plus_b_coll = self.bigrams_counter.get_collumn(a) + self.bigrams_counter.get_collumn(b) # a + b count collumn        
        right_marginal_count = self.right_counter[a] + self.right_counter[b]
        for l in set(a_plus_b_coll) - {a,b}:
            result += self.compute_q(a_plus_b_coll[l], self.left_counter[l], right_marginal_count)
            
        # Second sum
        a_plus_b_row = self.bigrams_counter.get_row(a) + self.bigrams_counter.get_row(b) # a + b count row 
        left_marginal_count = self.left_counter[a] + self.left_counter[b]
        for r in set(a_plus_b_row) - {a,b}:
            result += self.compute_q(a_plus_b_row[r], left_marginal_count, self.right_counter[r])

        # Intersection
        bigram_count = self.bigrams_counter[a,a] \
                     + self.bigrams_counter[a,b] \
                     + self.bigrams_counter[b,a] \
                     + self.bigrams_counter[b,b] 
        result += self.compute_q(bigram_count, left_marginal_count, right_marginal_count)
        return result

    def compute_MI_delta(self, a, b):
        "For given two classes, computes the change of MI after merge"
        return self.compute_add_term(a,b) - self.compute_sub_term(a,b)
    
    def compute_MI_loss(self, a, b):
        "For given two classes, computes the change of MI after merge"
        return self.compute_sub_term(a,b) - self.compute_add_term(a,b)

    def compute_MI(self):
        "Compute actuall Mutual Information (the slow way: it iterates all class combinations)"
        return sum(self.bigrams_logs.values())

    def sorted_class_combinations(self):
        "Returns all combinations of current classes. The items in combinations are sorted."
        for comb in combinations(self.class_set, 2):
            yield tuple(sorted(comb))

class SparseMatrixCounter(object):
    def __init__(self, iterable=None):
        self.rows = defaultdict(Counter)
        self.collumns = defaultdict(Counter)

        if iterable is not None:
            self.update(iterable)

    def update(self, iterable):
        if isinstance(iterable, dict): 
            for (x,y), value in iterable.items():
                self.add(x,y,value)
        else:
            for x, y in iterable:
                self.add(x,y,1)
    
    def __setitem__(self, index, value):
        row_index, collumn_index = index
        self.rows[row_index][collumn_index]     = value
        self.collumns[collumn_index][row_index] = value
    
    def __getitem__(self, index):
        row_index, collumn_index = index
        return self.rows.get(row_index, Counter())[collumn_index]

    def add(self, row_index, collumn_index, n=1):
        self.rows[row_index][collumn_index]     += n
        self.collumns[collumn_index][row_index] += n

    def get_row(self, row_index):
        return self.rows.get(row_index, Counter())
    
    def get_collumn(self, collumn_index):
        return self.collumns.get(collumn_index, Counter())
    
    def pop_row(self, row_index):
        row = self.rows.pop(row_index, Counter())
        for collumn_index in row:
            del self.collumns[collumn_index][row_index]
        return row
    
    def pop_collumn(self, collumn_index):
        collumn = self.collumns.pop(collumn_index, Counter())
        for row_index in collumn:
            del self.rows[row_index][collumn_index]
        return collumn

    def insert_row(self, row_index, row):
        self.pop_row(row_index)
        self.rows[row_index] = row
        for collumn_index, value in row.items():
            self.collumns[collumn_index][row_index] = value
    
    def insert_collumn(self, collumn_index, collumn):
        self.pop_collumn(collumn_index)
        self.collumns[collumn_index] = collumn
        for row_index, value in collumn.items():
            self.rows[row_index][collumn_index] = value

    def items(self):
        for row_index, row in self.rows.items():
            for collumn_index, value in row.items():
                index = (row_index, collumn_index)
                yield index, value 
    
    def values(self):
        for row in self.rows.values():
            for value in row.values():
                yield value 

    def __iter__(self):
        for row_index, row in self.rows.items():
            for collumn_index in row:
                yield row_index, collumn_index

    def check_integrity(self):
        for row_index, row in self.rows.items():
            for collumn_index, value in row.items():
                if self.collumns[collumn_index][row_index] != value:
                    raise ValueError("Values are not equal in the two indexes")
                if value == 0:
                    raise ValueError("Value is zero")
        
        for collumn_index, collumn in self.collumns.items():
            for row_index, value in collumn.items():
                if self.rows[row_index][collumn_index] != value:
                    raise ValueError("Values are not equal in the two indexes")
                if value == 0:
                    raise ValueError("Value is zero")

        

def get_new_id():
    MergableClass.new_id += 1
    return MergableClass.new_id

class MergableClass(object):
    new_id = 0
    map_to_id = defaultdict(get_new_id)

    def __new__(cls, word):
        return cls.MergableClassLeafeNode(word)

    class MergableClassBase(object):
        def __or__(self, other):
            return MergableClass.MergableClassInnerNode(self, other)

        def merge(self, other):
            return MergableClass.MergableClassInnerNode(self, other)

        def __hash__(self):
            return hash(self.id)

        def __eq__(self, other):
            return self.id == other.id

        def __lt__(self, other):
            return self.id < other.id

    class MergableClassLeafeNode(MergableClassBase):
        def __init__(self, string):
            self.string = string
            self.id = MergableClass.map_to_id[string]

        def __str__(self):
            return "<%s:%s>" % (self.id, self.string)
        
        def __repr__(self):
            return "<%s:%s>" % (self.id, self.string)

        def __iter__(self):
            yield self.string

    class MergableClassInnerNode(MergableClassBase):
        def __init__(self, first, second):
            self.tuple = tuple(sorted((first, second))) 
            self.id = MergableClass.map_to_id[self.tuple]
        
        def __str__(self):
            return "<%s>" % self.id
        
        def __repr__(self):
            return "<%s>" % self.id

        def __iter__(self):
            for word in self.tuple[0]:
                yield word
            for word in self.tuple[1]:
                yield word

def n_gram_generator(iterable, n=2):
    iterator = iter(iterable)
    actual_n_gram = deque()

    # fill the first n items to deque
    for _ in range(n):
        actual_n_gram.append(next(iterator))

    while True:
        yield tuple(actual_n_gram)
        actual_n_gram.append(next(iterator))
        actual_n_gram.popleft()

if __name__ == '__main__':
    main()
